/*
 * Cielo24
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddMediaResponse;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.JobInfoResponse;
import org.openapitools.client.model.NewJobBody;
import org.openapitools.client.model.NewJobResponse;
import org.openapitools.client.model.PerformTranscriptionBody;
import org.openapitools.client.model.PerformTranscriptionResponse;
import org.openapitools.client.model.PerformTranslationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobApi
 */
@Disabled
public class JobApiTest {

    private final JobApi api = new JobApi();

    /**
     * Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMediaFileTest() throws ApiException {
        Integer v = null;
        String jobId = null;
        Integer contentLength = null;
        File body = null;
        String isDuplicate = null;
        AddMediaResponse response = api.addMediaFile(v, jobId, contentLength, body, isDuplicate);
        // TODO: test validations
    }

    /**
     * Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMediaUrlTest() throws ApiException {
        Integer v = null;
        String jobId = null;
        String mediaUrl = null;
        String isDuplicate = null;
        AddMediaResponse response = api.addMediaUrl(v, jobId, mediaUrl, isDuplicate);
        // TODO: test validations
    }

    /**
     * Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeJobTest() throws ApiException {
        Integer v = null;
        String jobId = null;
        api.authorizeJob(v, jobId);
        // TODO: test validations
    }

    /**
     * Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaptionTest() throws ApiException {
        Integer v = null;
        String jobId = null;
        String captionFormat = null;
        String buildUrl = null;
        Integer captionWordsMin = null;
        String captionBySentence = null;
        Integer charactersPerCaptionLine = null;
        String dfxpHeader = null;
        String disallowDangling = null;
        String displayEffectsSpeakerAs = null;
        String displaySpeakerId = null;
        String iwpName = null;
        String elementlistVersion = null;
        String emitSpeakerChangeTokensAs = null;
        String forceCase = null;
        String includeDfxpMetadata = null;
        Integer layoutTargetCaptionLengthMs = null;
        String lineBreakOnSentence = null;
        String lineEndingFormat = null;
        Integer linesPerCaption = null;
        String maskProfanity = null;
        Integer maximumCaptionDuration = null;
        Integer mergeGapInterval = null;
        Integer minimumCaptionLengthMs = null;
        Integer minimumGapBetweenCaptionsMs = null;
        String qtSeamless = null;
        String removeDisfluencies = null;
        List<String> removeSoundsList = null;
        String removeSoundReferences = null;
        String replaceSlang = null;
        Integer silenceMaxMs = null;
        String singleSpeakerPerCaption = null;
        List<String> soundBoundaries = null;
        Integer soundThreshold = null;
        String soundTokensByCaption = null;
        String soundTokensByLine = null;
        List<String> soundTokensByCaptionList = null;
        List<String> soundTokensByLineList = null;
        String speakerOnNewLine = null;
        String srtFormat = null;
        String stripSquareBrackets = null;
        String utf8Mark = null;
        String replaceEnglishSpelling = null;
        String response = api.getCaption(v, jobId, captionFormat, buildUrl, captionWordsMin, captionBySentence, charactersPerCaptionLine, dfxpHeader, disallowDangling, displayEffectsSpeakerAs, displaySpeakerId, iwpName, elementlistVersion, emitSpeakerChangeTokensAs, forceCase, includeDfxpMetadata, layoutTargetCaptionLengthMs, lineBreakOnSentence, lineEndingFormat, linesPerCaption, maskProfanity, maximumCaptionDuration, mergeGapInterval, minimumCaptionLengthMs, minimumGapBetweenCaptionsMs, qtSeamless, removeDisfluencies, removeSoundsList, removeSoundReferences, replaceSlang, silenceMaxMs, singleSpeakerPerCaption, soundBoundaries, soundThreshold, soundTokensByCaption, soundTokensByLine, soundTokensByCaptionList, soundTokensByLineList, speakerOnNewLine, srtFormat, stripSquareBrackets, utf8Mark, replaceEnglishSpelling);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobInfoTest() throws ApiException {
        Integer v = null;
        String jobId = null;
        JobInfoResponse response = api.jobInfo(v, jobId);
        // TODO: test validations
    }

    /**
     * Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newJobTest() throws ApiException {
        Integer v = null;
        NewJobBody newJobBody = null;
        NewJobResponse response = api.newJob(v, newJobBody);
        // TODO: test validations
    }

    /**
     * Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performTranscriptionTest() throws ApiException {
        Integer v = null;
        PerformTranscriptionBody performTranscriptionBody = null;
        PerformTranscriptionResponse response = api.performTranscription(v, performTranscriptionBody);
        // TODO: test validations
    }

    /**
     * Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performTranslationTest() throws ApiException {
        Integer v = null;
        String jobId = null;
        String targetLanguages = null;
        String approveUplevel = null;
        PerformTranslationResponse response = api.performTranslation(v, jobId, targetLanguages, approveUplevel);
        // TODO: test validations
    }

}
