/*
 * Cielo24
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.JSON;

/**
 * PerformTranscriptionBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-23T14:23:37.762-03:00[America/Sao_Paulo]")
public class PerformTranscriptionBody {
  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  /**
   * The desired fidelity of the transcription
   */
  @JsonAdapter(TranscriptionFidelityEnum.Adapter.class)
  public enum TranscriptionFidelityEnum {
    MECHANICAL("MECHANICAL"),
    
    PREMIUM("PREMIUM"),
    
    PROFESSIONAL("PROFESSIONAL");

    private String value;

    TranscriptionFidelityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TranscriptionFidelityEnum fromValue(String value) {
      for (TranscriptionFidelityEnum b : TranscriptionFidelityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TranscriptionFidelityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TranscriptionFidelityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TranscriptionFidelityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TranscriptionFidelityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSCRIPTION_FIDELITY = "transcription_fidelity";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPTION_FIDELITY)
  private TranscriptionFidelityEnum transcriptionFidelity;

  /**
   * The desired priority of the transcription
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    STANDARD("STANDARD"),
    
    PRIORITY("PRIORITY");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityEnum priority;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private String options;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE = "target_language";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE)
  private String targetLanguage;

  public static final String SERIALIZED_NAME_TURNAROUND_HOURS = "turnaround_hours";
  @SerializedName(SERIALIZED_NAME_TURNAROUND_HOURS)
  private Integer turnaroundHours;

  public PerformTranscriptionBody() { 
  }

  public PerformTranscriptionBody jobId(String jobId) {
    
    this.jobId = jobId;
    return this;
  }

   /**
   * The ID of the job
   * @return jobId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0fbd6015910e42dca25a863c4925d77c", required = true, value = "The ID of the job")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public PerformTranscriptionBody transcriptionFidelity(TranscriptionFidelityEnum transcriptionFidelity) {
    
    this.transcriptionFidelity = transcriptionFidelity;
    return this;
  }

   /**
   * The desired fidelity of the transcription
   * @return transcriptionFidelity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The desired fidelity of the transcription")

  public TranscriptionFidelityEnum getTranscriptionFidelity() {
    return transcriptionFidelity;
  }


  public void setTranscriptionFidelity(TranscriptionFidelityEnum transcriptionFidelity) {
    this.transcriptionFidelity = transcriptionFidelity;
  }


  public PerformTranscriptionBody priority(PriorityEnum priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * The desired priority of the transcription
   * @return priority
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The desired priority of the transcription")

  public PriorityEnum getPriority() {
    return priority;
  }


  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }


  public PerformTranscriptionBody callbackUrl(String callbackUrl) {
    
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * A URL with query string which will be called on completion. If submitting the callback_url as a query string parameter, rather than a value in the POST data, the callback_url should be URL encoded. The callback URL can contain tags that will be replaced with job specific data when the callback is called. Below is the list of tags that are supported: {job_id}, {job_name}, {elementlist_version}, {iwp_name} (The Interim Work Product name associated with this ElementList version)
   * @return callbackUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://www.domain.com/path", value = "A URL with query string which will be called on completion. If submitting the callback_url as a query string parameter, rather than a value in the POST data, the callback_url should be URL encoded. The callback URL can contain tags that will be replaced with job specific data when the callback is called. Below is the list of tags that are supported: {job_id}, {job_name}, {elementlist_version}, {iwp_name} (The Interim Work Product name associated with this ElementList version)")

  public String getCallbackUrl() {
    return callbackUrl;
  }


  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public PerformTranscriptionBody options(String options) {
    
    this.options = options;
    return this;
  }

   /**
   * A job options json. See JobOptions object for details.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"notes\": \"test\"}", value = "A job options json. See JobOptions object for details.")

  public String getOptions() {
    return options;
  }


  public void setOptions(String options) {
    this.options = options;
  }


  public PerformTranscriptionBody targetLanguage(String targetLanguage) {
    
    this.targetLanguage = targetLanguage;
    return this;
  }

   /**
   * An RFC 5646 language code to translate this job into. If not specified, then no translation will be performed. If specified, but the language code specified matches the language code on the job request, then no translation will be performed.
   * @return targetLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en (Any RFC 5646 language code)", value = "An RFC 5646 language code to translate this job into. If not specified, then no translation will be performed. If specified, but the language code specified matches the language code on the job request, then no translation will be performed.")

  public String getTargetLanguage() {
    return targetLanguage;
  }


  public void setTargetLanguage(String targetLanguage) {
    this.targetLanguage = targetLanguage;
  }


  public PerformTranscriptionBody turnaroundHours(Integer turnaroundHours) {
    
    this.turnaroundHours = turnaroundHours;
    return this;
  }

   /**
   * The number of hours after submission that the job will be returned. If not specified, it will be set to a default based on the value of the priority parameter. The defaults are 24 and 48 for the PRIORITY and STANDARD priorities respectively. If you request a smaller number of hours than the default for the priority you have selected, the priority will be automatically changed. For example if you request a turnaround_hours of 16 with a priority of STANDARD, the priority will be automatically, and silently, changed to PRIORITY.
   * @return turnaroundHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "36", value = "The number of hours after submission that the job will be returned. If not specified, it will be set to a default based on the value of the priority parameter. The defaults are 24 and 48 for the PRIORITY and STANDARD priorities respectively. If you request a smaller number of hours than the default for the priority you have selected, the priority will be automatically changed. For example if you request a turnaround_hours of 16 with a priority of STANDARD, the priority will be automatically, and silently, changed to PRIORITY.")

  public Integer getTurnaroundHours() {
    return turnaroundHours;
  }


  public void setTurnaroundHours(Integer turnaroundHours) {
    this.turnaroundHours = turnaroundHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformTranscriptionBody performTranscriptionBody = (PerformTranscriptionBody) o;
    return Objects.equals(this.jobId, performTranscriptionBody.jobId) &&
        Objects.equals(this.transcriptionFidelity, performTranscriptionBody.transcriptionFidelity) &&
        Objects.equals(this.priority, performTranscriptionBody.priority) &&
        Objects.equals(this.callbackUrl, performTranscriptionBody.callbackUrl) &&
        Objects.equals(this.options, performTranscriptionBody.options) &&
        Objects.equals(this.targetLanguage, performTranscriptionBody.targetLanguage) &&
        Objects.equals(this.turnaroundHours, performTranscriptionBody.turnaroundHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, transcriptionFidelity, priority, callbackUrl, options, targetLanguage, turnaroundHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformTranscriptionBody {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    transcriptionFidelity: ").append(toIndentedString(transcriptionFidelity)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    targetLanguage: ").append(toIndentedString(targetLanguage)).append("\n");
    sb.append("    turnaroundHours: ").append(toIndentedString(turnaroundHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("job_id");
    openapiFields.add("transcription_fidelity");
    openapiFields.add("priority");
    openapiFields.add("callback_url");
    openapiFields.add("options");
    openapiFields.add("target_language");
    openapiFields.add("turnaround_hours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("job_id");
    openapiRequiredFields.add("transcription_fidelity");
    openapiRequiredFields.add("priority");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PerformTranscriptionBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PerformTranscriptionBody.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformTranscriptionBody is not found in the empty JSON string", PerformTranscriptionBody.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PerformTranscriptionBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformTranscriptionBody` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PerformTranscriptionBody.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("job_id") != null && !jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
      if (jsonObj.get("transcription_fidelity") != null && !jsonObj.get("transcription_fidelity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcription_fidelity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcription_fidelity").toString()));
      }
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if (jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if (jsonObj.get("target_language") != null && !jsonObj.get("target_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformTranscriptionBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformTranscriptionBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformTranscriptionBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformTranscriptionBody.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformTranscriptionBody>() {
           @Override
           public void write(JsonWriter out, PerformTranscriptionBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformTranscriptionBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PerformTranscriptionBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PerformTranscriptionBody
  * @throws IOException if the JSON string is invalid with respect to PerformTranscriptionBody
  */
  public static PerformTranscriptionBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformTranscriptionBody.class);
  }

 /**
  * Convert an instance of PerformTranscriptionBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

